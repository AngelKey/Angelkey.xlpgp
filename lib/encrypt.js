// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var BlockReader, C, DataPacket, Encryptor, Header, Index, PacketWriter, iced, make_esc, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  make_esc = require('iced-error').make_esc;

  Index = require('./index').Index;

  Header = require('./header').Header;

  C = require('./const');

  DataPacket = require('./packet').DataPacket;

  _ref = require('./io'), BlockReader = _ref.BlockReader, PacketWriter = _ref.PacketWriter;

  exports.Encryptor = Encryptor = (function() {
    function Encryptor(_arg) {
      var config, _base, _base1;
      this.stubs = _arg.stubs, config = _arg.config;
      this._data = {
        cipher: {},
        hmac: {}
      };
      this._packet_writer = new PacketWriter({
        stubs: this.stubs
      });
      this.config = config || {};
      (_base = this.config).blocksize || (_base.blocksize = C.defaults.blocksize);
      (_base1 = this.config).hashes_per_index_packet || (_base1.hashes_per_index_packet = C.defaults.hashes_per_index_packet);
      this._index = new Index({
        stubs: this.stubs,
        config: this.config
      });
      this._block_reader = new BlockReader({
        stubs: this.stubs,
        config: this.config
      });
    }

    Encryptor.prototype.run = function(cb) {
      var esc, first_hmac, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Encryptor::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor.run"
          });
          _this._init(esc(__iced_deferrals.defer({
            lineno: 25
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
              funcname: "Encryptor.run"
            });
            _this._generate_keys(esc(__iced_deferrals.defer({
              lineno: 26
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                funcname: "Encryptor.run"
              });
              _this._write_header({}, esc(__iced_deferrals.defer({
                lineno: 27
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                  funcname: "Encryptor.run"
                });
                _this._write_file(esc(__iced_deferrals.defer({
                  lineno: 28
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                    funcname: "Encryptor.run"
                  });
                  _this._index.regen(esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return first_hmac = arguments[0];
                      };
                    })(),
                    lineno: 29
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                      funcname: "Encryptor.run"
                    });
                    _this._packet_writer.rewind(esc(__iced_deferrals.defer({
                      lineno: 30
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                        funcname: "Encryptor.run"
                      });
                      _this._write_header({
                        first_hmac: first_hmac
                      }, esc(__iced_deferrals.defer({
                        lineno: 31
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                          funcname: "Encryptor.run"
                        });
                        _this._write_index(esc(__iced_deferrals.defer({
                          lineno: 32
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                            funcname: "Encryptor.run"
                          });
                          _this.stubs.close(esc(__iced_deferrals.defer({
                            lineno: 33
                          })));
                          __iced_deferrals._fulfill();
                        })(function() {
                          return cb(null);
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    Encryptor.prototype._init = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor._init"
          });
          _this.stubs.init({}, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 39
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Encryptor.prototype._generate_keys = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Encryptor::_generate_keys");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor._generate_keys"
          });
          _this.stubs.prng(C.cipher.key_size, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.key = arguments[0];
              };
            })(_this._data.cipher),
            lineno: 46
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
              funcname: "Encryptor._generate_keys"
            });
            _this.stubs.prng(C.cipher.iv_size, esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.iv = arguments[0];
                };
              })(_this._data.cipher),
              lineno: 47
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                funcname: "Encryptor._generate_keys"
              });
              _this.stubs.prng(C.hmac.key_size, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.key = arguments[0];
                  };
                })(_this._data.hmac),
                lineno: 48
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                  funcname: "Encryptor._generate_keys"
                });
                _this.stubs.init_aes256ctr(_this._data.cipher, esc(__iced_deferrals.defer({
                  lineno: 50
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                    funcname: "Encryptor._generate_keys"
                  });
                  _this.stubs.init_hmac_sha256(_this._data.hmac, esc(__iced_deferrals.defer({
                    lineno: 51
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  _this._hdr = new Header({
                    stubs: _this.stubs,
                    keys: _this._data
                  });
                  return cb(null);
                });
              });
            });
          });
        };
      })(this));
    };

    Encryptor.prototype._write_index = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor._write_index"
          });
          _this._index.rewrite({
            packet_writer: _this._packet_writer
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 59
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Encryptor.prototype._write_header = function(_arg, cb) {
      var esc, first_hmac, packet, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      first_hmac = _arg.first_hmac;
      esc = make_esc(cb, "Encryptor::_write_header");
      if (first_hmac != null) {
        this._hdr.set_hmac_packet_1(first_hmac);
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor._write_header"
          });
          _this._hdr.to_packet(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return packet = arguments[0];
              };
            })(),
            lineno: 67
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
              funcname: "Encryptor._write_header"
            });
            _this._packet_writer.write({
              packet: packet
            }, esc(__iced_deferrals.defer({
              lineno: 68
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Encryptor.prototype._write_file = function(cb) {
      var buf, eof, esc, go, i, offset, packet, packetno, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Encryptor::_write_file");
      go = true;
      i = 0;
      (function(_this) {
        return (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!go) {
              return _break();
            } else {
              packetno = i + 1;
              packet = null;
              (function(__iced_k) {
                if ((i % _this.config.hashes_per_index_packet) === 0) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                      funcname: "Encryptor._write_file"
                    });
                    _this._index.gen_dummy({
                      packetno: packetno
                    }, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return packet = arguments[0];
                        };
                      })(),
                      lineno: 81
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                      funcname: "Encryptor._write_file"
                    });
                    _this._block_reader.read(esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          buf = arguments[0];
                          return eof = arguments[1];
                        };
                      })(),
                      lineno: 83
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    if (eof) {
                      go = false;
                    }
                    return __iced_k(buf.length ? packet = new DataPacket({
                      plaintext: buf,
                      stubs: _this.stubs,
                      packetno: packetno
                    }) : void 0);
                  });
                }
              })(function() {
                (function(__iced_k) {
                  if (packet != null) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                        funcname: "Encryptor._write_file"
                      });
                      packet.crypto(esc(__iced_deferrals.defer({
                        lineno: 88
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                          funcname: "Encryptor._write_file"
                        });
                        _this._packet_writer.write({
                          packet: packet
                        }, esc(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return offset = arguments[0];
                            };
                          })(),
                          lineno: 89
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        _this._index.index({
                          packetno: packetno,
                          hmac: packet.hmac
                        });
                        packet.set_offset(offset);
                        return __iced_k(i++);
                      });
                    });
                  } else {
                    return __iced_k();
                  }
                })(_next);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    return Encryptor;

  })();

  exports.encrypt = function(_arg, cb) {
    var config, e, err, stubs, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    stubs = _arg.stubs, config = _arg.config;
    e = new Encryptor({
      stubs: stubs,
      config: config
    });
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
          funcname: "encrypt"
        });
        e.run(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 99
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err);
      };
    })(this));
  };

}).call(this);
