// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var ASP, C, DataPacket, Encryptor, Header, Index, PacketWriter, iced, make_esc, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  make_esc = require('iced-error').make_esc;

  Index = require('./index').Index;

  Header = require('./header').Header;

  C = require('./const');

  DataPacket = require('./packet').DataPacket;

  PacketWriter = require('./io').PacketWriter;

  ASP = require('pgp-utils').util.ASP;

  exports.Encryptor = Encryptor = (function() {
    function Encryptor(_arg) {
      var asp, config, _base, _base1;
      this.stubs = _arg.stubs, asp = _arg.asp, config = _arg.config;
      this._index = new Index({
        stubs: this.stubs
      });
      this._data = {
        cipeher: {},
        hmac: {}
      };
      this._packet_writer = new PacketWriter({
        stubs: this.stubs
      });
      this.asp = ASP.make(asp);
      this.config = config || {};
      (_base = this.config).blocksize || (_base.blocksize = C.defaults.blocksize);
      (_base1 = this.config).hashes_per_block || (_base1.hashes_per_block = C.defaults.hashes_per_block);
    }

    Encryptor.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Encryptor::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor.run"
          });
          _this._init(esc(__iced_deferrals.defer({
            lineno: 26
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
              funcname: "Encryptor.run"
            });
            _this._generate_keys(esc(__iced_deferrals.defer({
              lineno: 27
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                funcname: "Encryptor.run"
              });
              _this._write_header({
                dummy: true
              }, esc(__iced_deferrals.defer({
                lineno: 28
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                  funcname: "Encryptor.run"
                });
                _this._write_dummy_index(esc(__iced_deferrals.defer({
                  lineno: 29
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                    funcname: "Encryptor.run"
                  });
                  _this._write_file(esc(__iced_deferrals.defer({
                    lineno: 30
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                      funcname: "Encryptor.run"
                    });
                    _this._generate_index(esc(__iced_deferrals.defer({
                      lineno: 31
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    _this._packet_writer.rewind();
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                        funcname: "Encryptor.run"
                      });
                      _this._write_header({
                        dummy: false
                      }, esc(__iced_deferrals.defer({
                        lineno: 33
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                          funcname: "Encryptor.run"
                        });
                        _this._write_index(esc(__iced_deferrals.defer({
                          lineno: 34
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                            funcname: "Encryptor.run"
                          });
                          _this.stubs.flush(esc(__iced_deferrals.defer({
                            lineno: 35
                          })));
                          __iced_deferrals._fulfill();
                        })(function() {
                          return cb(null);
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    Encryptor.prototype.init = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor.init"
          });
          _this.stubs.init({
            asp: _this.asp
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 41
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Encryptor.prototype._generate_keys = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Encryptor::_generate_keys");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor._generate_keys"
          });
          _this.stubs.prng(C.cipher.key_size, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.key = arguments[0];
              };
            })(_this._data.cipher),
            lineno: 48
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
              funcname: "Encryptor._generate_keys"
            });
            _this.stubs.prng(C.cipher.iv_size, esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.iv = arguments[0];
                };
              })(_this._data.cipher),
              lineno: 49
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                funcname: "Encryptor._generate_keys"
              });
              _this.stubs.prng(C.hmac.key_size, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.key = arguments[0];
                  };
                })(_this._data.hmac),
                lineno: 50
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                  funcname: "Encryptor._generate_keys"
                });
                _this.stubs.init_aes256ctr(_this._data.cipher, esc(__iced_deferrals.defer({
                  lineno: 52
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                    funcname: "Encryptor._generate_keys"
                  });
                  _this.stubs.init_hmac_ah256(_this._data.hmac, esc(__iced_deferrals.defer({
                    lineno: 53
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  _this._hdr = new Header({
                    stubs: _this.stubs,
                    keys: _this._data
                  });
                  return cb(null);
                });
              });
            });
          });
        };
      })(this));
    };

    Encryptor.prototype._write_index = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor._write_index"
          });
          _this._packet_writer.write({
            packets: _this._index_packets
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 61
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Encryptor.prototype._write_header = function(opts, cb) {
      var esc, packet, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Encryptor::_write_dummy_header");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor._write_header"
          });
          _this._hdr.to_packet(opts, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return packet = arguments[0];
              };
            })(),
            lineno: 68
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
              funcname: "Encryptor._write_header"
            });
            _this._packet_writer.write({
              packet: packet
            }, esc(__iced_deferrals.defer({
              lineno: 69
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Encryptor.prototype._write_dummy_index = function(cb) {
      var err, packets, tmp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      tmp = new Index({
        stubs: this.stubs,
        config: this.config
      });
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor._write_dummy_index"
          });
          tmp.gen_dummy({}, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return packets = arguments[0];
              };
            })(),
            lineno: 76
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
              funcname: "Encryptor._write_dummy_index"
            });
            _this._packet_writer.write({
              packets: packets
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 77
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(err);
          });
        };
      })(this));
    };

    Encryptor.prototype._generate_index = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor._generate_index"
          });
          _this._index.generate({}, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1._index_packets = arguments[1];
              };
            })(_this),
            lineno: 83
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this._hdr.set_hmac_block_1(_this._index_packets[0].hmac);
          return cb(err);
        };
      })(this));
    };

    Encryptor.prototype._write_file = function(cb) {
      var buf, end, esc, i, index, len, packet, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Encryptor::_write_file");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
            funcname: "Encryptor._write_file"
          });
          _this.stubs.get_length(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return len = arguments[0];
              };
            })(),
            lineno: 91
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          i = 0;
          (function(__iced_k) {
            var _results, _while;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(i < len)) {
                return _break();
              } else {
                end = Math.min(i + _this.config.blocksize, len);
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                    funcname: "Encryptor._write_file"
                  });
                  _this.stubs.read({
                    start: start,
                    bytes: end - start
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return buf = arguments[0];
                      };
                    })(),
                    lineno: 95
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  packet = new DataPacket({
                    buf: buf,
                    stubs: _this.stubs
                  });
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                      funcname: "Encryptor._write_file"
                    });
                    packet.encrypt(esc(__iced_deferrals.defer({
                      lineno: 97
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
                        funcname: "Encryptor._write_file"
                      });
                      _this._packet_writer.write({
                        packet: packet
                      }, esc(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return index = arguments[0];
                          };
                        })(),
                        lineno: 98
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      return _next(_this._index.index({
                        index: index,
                        hmac: packet.hmac
                      }));
                    });
                  });
                });
              }
            };
            _while(__iced_k);
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    return Encryptor;

  })();

  exports.encrypt = function(_arg, cb) {
    var asp, config, e, err, stubs, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    stubs = _arg.stubs, asp = _arg.asp, config = _arg.config;
    e = new Encryptor({
      stubs: stubs,
      asp: asp,
      config: config
    });
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/xlpgp/src/encrypt.iced",
          funcname: "encrypt"
        });
        e.run(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 106
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err);
      };
    })(this));
  };

}).call(this);
