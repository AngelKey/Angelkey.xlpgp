// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var PacketWriter, iced, make_esc, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  make_esc = require('iced-error').make_esc;

  exports.PacketWriter = PacketWriter = (function() {
    function PacketWriter(_arg) {
      this.stubs = _arg.stubs;
      this._pos = 0;
    }

    PacketWriter.prototype.rewind = function(cb) {
      this._pos = 0;
      return cb(null);
    };

    PacketWriter.prototype.write = function(_arg, cb) {
      var buf, esc, offset, p, packet, packets, start, start_pos, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      offset = _arg.offset, packet = _arg.packet, packets = _arg.packets;
      esc = make_esc(cb, "PacketWriter::write");
      packets || (packets = [packet]);
      start = this._index;
      if (offset != null) {
        this._pos = offset;
      }
      start_pos = this._pos;
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = packets;
          _len = _ref.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              p = _ref[_i];
              buf = p.to_buffer();
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/xlpgp/src/io.iced",
                  funcname: "PacketWriter.write"
                });
                _this.stubs.write({
                  buf: buf,
                  start: _this._pos
                }, esc(__iced_deferrals.defer({
                  lineno: 29
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(_this._pos += buf.length);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, start_pos);
        };
      })(this));
    };

    return PacketWriter;

  })();

}).call(this);
